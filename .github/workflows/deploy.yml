name: Deploy Laravel Application to Production

on:
  push:
    branches: ["production"]
  pull_request:
    branches: ["production"]

jobs:
  deploy: # Nama job
    # Menentukan OS runner
    runs-on: ubuntu-latest

    # Variabel lingkungan untuk tag image dan domain
    env:
      PHP_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/laravel-php-fpm # Nama image PHP Anda
      NGINX_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/laravel-nginx # Nama image Nginx Anda
      APP_DOMAIN: ngabaca.${{ secrets.EC2_HOST }}.nip.io # Domain Anda, akan menggunakan IP EC2 dari secret

    # Langkah-langkah yang akan dijalankan
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4 # Mengambil kode dari repositori GitHub

      # --- Bagian Build dan Push Image ---
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push PHP-FPM Image
        uses: docker/build-push-action@v5
        with:
          context: . # Konteks build adalah root proyek Laravel Anda (tempat Dockerfile berada)
          dockerfile: Dockerfile # Menentukan Dockerfile PHP-FPM
          push: true
          tags: |
            ${{ env.PHP_IMAGE_NAME }}:${{ github.sha }} 
            ${{ env.PHP_IMAGE_NAME }}:latest

      # Perhatikan: Nginx akan kita gunakan image resmi, tidak perlu build custom untuk Nginx jika tidak ada customisasi di dalamnya.
      # Jika Nginx Anda membutuhkan build khusus (misalnya, jika Anda modifikasi Dockerfile Nginx), Anda bisa membuat step build lain di sini.

      # --- Bagian Deployment ke EC2 ---
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add EC2 host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Deploy Application to EC2
        run: |
          echo "Starting deployment to EC2..."

          # Login Docker di EC2
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo '${{ secrets.DOCKER_PASSWORD }}' | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin"

          # Tarik image terbaru dari Docker Hub di EC2
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "docker pull ${{ env.PHP_IMAGE_NAME }}:latest"
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "docker pull nginx:alpine"

          echo "Images pulled on EC2."

          # Membuat direktori untuk deployment di EC2 jika belum ada
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p ~/laravel-app-deployment/nginx_config"
          echo "Deployment directory created/ensured on EC2."

          # Salin konfigurasi Nginx dari runner ke EC2
          scp -r nginx/nginx.conf ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/laravel-app-deployment/nginx_config/ngabaca.conf

          # Modifikasi server_name di file konfigurasi Nginx di EC2
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            sed -i 's|server_name localhost;|server_name ${{ env.APP_DOMAIN }};|g' ~/laravel-app-deployment/nginx_config/ngabaca.conf
          "
          echo "Nginx config copied and modified on EC2."

          # Menulis docker-compose.yml langsung di EC2
          # PERHATIKAN: BARIS EOL PENUTUP DI BAWAH INI HARUS TANPA INDENTASI ATAU SPASI
          # Konten di dalamnya juga harus di-escape dengan benar untuk shell SSH
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'cat > ~/laravel-app-deployment/docker-compose.yml << "EOF_DOCKER_COMPOSE"
          version: "3.8"
          services:
            php-fpm:
              image: '${{ env.PHP_IMAGE_NAME }}:latest'
              container_name: laravel-php-fpm
              networks:
                - app-network
            nginx:
              image: nginx:alpine
              container_name: laravel-nginx
              volumes:
                - ~/laravel-app-deployment/nginx_config/ngabaca.conf:/etc/nginx/conf.d/default.conf:ro
              ports:
                - "80:80"
              depends_on:
                - php-fpm
              networks:
                - app-network
          networks:
            app-network:
              driver: bridge
          EOF_DOCKER_COMPOSE
          '
          echo "docker-compose.yml generated on EC2."

          # Menghentikan kontainer lama jika ada dan menjalankan yang baru
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            cd ~/laravel-app-deployment && \
            docker compose down --remove-orphans && \
            docker compose up -d
          "
          echo "New containers deployed and running on EC2."
          echo "Deployment to EC2 completed!"

      - name: Verify Deployment (Optional)
        run: |
          echo "Verifying application access on EC2..."
          sleep 60 # Beri waktu lebih lama agar aplikasi siap
          curl -H "Host: ${{ env.APP_DOMAIN }}" http://${{ secrets.EC2_HOST }}
          echo ""
          echo "Application verified!"
