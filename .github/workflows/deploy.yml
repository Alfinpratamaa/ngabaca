name: Deploy Laravel Application to Production

on:
  push:
    branches: ["production"]
  pull_request:
    branches: ["production"]

jobs:
  deploy: # Nama job
    # Menentukan OS runner
    runs-on: ubuntu-latest

    # Variabel lingkungan untuk tag image dan domain
    env:
      PHP_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/laravel-php-fpm # Nama image PHP Anda
      NGINX_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/laravel-nginx # Nama image Nginx Anda
      APP_DOMAIN: ngabaca.${{ secrets.EC2_HOST }}.nip.io # Domain Anda, akan menggunakan IP EC2 dari secret

    # Langkah-langkah yang akan dijalankan
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4 # Mengambil kode dari repositori GitHub

      # --- Bagian Build dan Push Image ---
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push PHP-FPM Image
        uses: docker/build-push-action@v5
        with:
          context: . # Konteks build adalah root proyek Laravel Anda (tempat Dockerfile berada)
          dockerfile: Dockerfile # Menentukan Dockerfile PHP-FPM
          push: true # Dorong image ke Docker Hub
          tags: |
            ${{ env.PHP_IMAGE_NAME }}:${{ github.sha }} # Tag dengan commit SHA (unik)
            ${{ env.PHP_IMAGE_NAME }}:latest # Tag dengan latest

      # Perhatikan: Nginx akan kita gunakan image resmi, tidak perlu build custom untuk Nginx jika tidak ada customisasi di dalamnya.
      # Jika Nginx Anda membutuhkan build khusus (misalnya, jika Anda modifikasi Dockerfile Nginx), Anda bisa membuat step build lain di sini.

      # --- Bagian Deployment ke EC2 ---
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }} # Kunci privat EC2 Anda dari GitHub Secret

      - name: Add EC2 host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Deploy Application to EC2
        run: |
          echo "Starting deployment to EC2..."

          # Login Docker di EC2 agar bisa pull image dari Docker Hub
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo '${{ secrets.DOCKER_PASSWORD }}' | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin"

          # Tarik image terbaru dari Docker Hub di EC2
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "docker pull ${{ env.PHP_IMAGE_NAME }}:latest"
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "docker pull nginx:alpine" # Tarik image Nginx resmi

          echo "Images pulled on EC2."

          # Membuat konfigurasi Nginx di EC2
          # Kita perlu memodifikasi konfigurasi Nginx agar server_name sesuai
          # Ini akan membuat file ngabaca.conf di EC2 dan mengganti placeholder IP
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            mkdir -p ~/laravel-app-deployment/nginx_config
            cat > ~/laravel-app-deployment/nginx_config/ngabaca.conf <<EOL
            server {
                listen 80;
                server_name ${{ env.APP_DOMAIN }}; # Menggunakan domain dari env
                root /var/www/html/public;
                add_header X-Frame-Options \"SAMEORIGIN\";
                add_header X-XSS-Protection \"1; mode=block\";
                add_header X-Content-Type-Options \"nosniff\";
                index index.html index.htm index.php;
                charset utf-8;
                location / {
                    try_files \$uri \$uri/ /index.php?\$query_string;
                }
                location ~ \\.php\$ {
                    fastcgi_pass php-fpm:9000;
                    fastcgi_index index.php;
                    fastcgi_param SCRIPT_FILENAME \$realpath_root\$fastcgi_script_name;
                    include fastcgi_params;
                }
                location ~ /\\.(?!well-known).* {
                    deny all;
                }
            }
            EOL
          "
          echo "Nginx config generated on EC2."

          # Menulis docker-compose.yml langsung di EC2
          # Ini lebih mudah daripada menyalinnyaaa
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            cat > ~/laravel-app-deployment/docker-compose.yml <<EOL
            version: '3.8'
            services:
              php-fpm:
                image: ${{ env.PHP_IMAGE_NAME }}:latest
                container_name: laravel-php-fpm
                volumes:
                  - /home/${{ secrets.EC2_USER }}/laravel-app-deployment/app_code:/var/www/html # Akan mount kode dari EC2
                networks:
                  - app-network
              nginx:
                image: nginx:alpine
                container_name: laravel-nginx
                volumes:
                  - /home/${{ secrets.EC2_USER }}/laravel-app-deployment/app_code:/var/www/html # Mount kode dari EC2
                  - ~/laravel-app-deployment/nginx_config/ngabaca.conf:/etc/nginx/conf.d/default.conf # Mount config Nginx
                ports:
                  - \"80:80\" # Expose port 80 ke host EC2
                depends_on:
                  - php-fpm
                networks:
                  - app-network
            networks:
              app-network:
                driver: bridge
            EOL
          "
          echo "docker-compose.yml generated on EC2."

          # Menghentikan kontainer lama jika ada dan menjalankan yang baru
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            cd ~/laravel-app-deployment && \
            docker compose down --remove-orphans && \
            docker compose up -d
          "
          echo "New containers deployed and running on EC2."
          echo "Deployment to EC2 completed!"

      - name: Verify Deployment (Optional)
        run: |
          echo "Verifying application access on EC2..."
          sleep 30 # Beri waktu lebih lama agar aplikasi siap
          curl -H "Host: ${{ env.APP_DOMAIN }}" http://${{ secrets.EC2_HOST }}
          echo ""
          echo "Application verified!"
