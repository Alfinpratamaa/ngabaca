name: Deploy Laravel App to Production EC2

on:
    push:
        branches: ['production']

jobs:
    deploy:
        runs-on: ubuntu-latest

        env:
            APP_DOMAIN: ngabaca.${{ secrets.EC2_HOST }}.nip.io
            LARAVEL_ENV_ENCRYPTION_KEY: ${{ secrets.LARAVEL_ENV_ENCRYPTION_KEY }}

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            # --- Persiapan SSH untuk EC2 ---
            - name: Set up SSH
              uses: webfactory/ssh-agent@v0.8.0
              with:
                  ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

            - name: Add EC2 host to known_hosts
              run: |
                  mkdir -p ~/.ssh
                  ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

            # --- Upload deploy & install script to EC2 ---
            - name: Upload install-dependencies.sh
              uses: appleboy/scp-action@v0.1.4
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USER }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  source: 'install-dependencies.sh'
                  target: '~/'

            - name: Upload deploy.sh
              uses: appleboy/scp-action@v0.1.4
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USER }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  source: 'deploy.sh'
                  target: '~/'

            - name: Upload Nginx config
              uses: appleboy/scp-action@v0.1.4
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USER }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  source: 'nginx/nginx.conf'
                  target: '~/nginx_temp/'

            # --- Jalankan script install di EC2 ---
            - name: Run install-dependencies.sh on EC2
              uses: appleboy/ssh-action@v0.1.10
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USER }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  script: |
                      chmod +x ~/install-dependencies.sh
                      ~/install-dependencies.sh

            # --- Eksekusi deploy.sh di EC2 ---
            - name: Run deploy.sh on EC2
              uses: appleboy/ssh-action@v0.1.10
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USER }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  script: |
                      export LARAVEL_ENV_ENCRYPTION_KEY='${{ secrets.LARAVEL_ENV_ENCRYPTION_KEY }}'
                      export GITHUB_REPOSITORY='${{ github.repository }}'
                      chmod +x ~/deploy.sh
                      ~/deploy.sh

            # --- Konfigurasi Nginx ---
            - name: Configure and Restart Nginx/PHP-FPM on EC2
              uses: appleboy/ssh-action@v0.1.10
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USER }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  script: |
                      sudo mkdir -p /etc/nginx/sites-available
                      sudo mkdir -p /etc/nginx/sites-enabled
                      DOMAIN=${{ env.APP_DOMAIN }}

                      sudo sed "s|server_name localhost;|server_name $DOMAIN;|" ~/nginx_temp/nginx.conf > ~/nginx_temp/ngabaca.conf

                      sudo mv ~/nginx_temp/ngabaca.conf /etc/nginx/sites-available/ngabaca.conf

                      sudo rm -f /etc/nginx/sites-enabled/default
                      sudo ln -sf /etc/nginx/sites-available/ngabaca.conf /etc/nginx/sites-enabled/ngabaca.conf

                      sudo nginx -t
                      sudo systemctl restart nginx
                      sudo systemctl restart php8.4-fpm

            # --- Verifikasi Deploy ---
            - name: Verify Deployment
              run: |
                  echo "Verifying application..."
                  echo "Accessing domain: https://${{ env.APP_DOMAIN }}"
                  sleep 20
                  curl -k https://${{ env.APP_DOMAIN }} || true
                  echo ""
                  echo "Application verified!"
                  echo "Deployment completed successfully!"
